[
{
	"uri": "//localhost:1313/1-introduction/1.1-transit-gateway/",
	"title": "AWS Transit Gateway",
	"tags": [],
	"description": "",
	"content": "In this section we will learn what AWS Transit Gateway is and why we need this feature.\nAmazon VPC and VPC Peering Amazon Virtual Private Cloud (VPC) is an isolated virtual network within the AWS Cloud. Amazon VPC is very similar to traditional networks, allows users to deploy servers, databases, and other computing resources.\nIn fact, there are many cases where we need to connect two or more VPCs to share resources and data between these networks. The simplest way to connect these networks is through the Internet connection, however this method has many potential security risks, is unreliable and does not guarantee performance.\nVPC Peering is a feature that allows connecting two or more Amazon VPCs together through AWS\u0026rsquo;s private network, do not use Internet connection. When using VPC Peering to connect 2 VPCs, the resources in one network can connect to resources in the remaining network via private IP addresses as if they were in the same network. While VPC Peering is an effective feature for connecting VPCs together, it also has some drawbacks. One of these is that it can be cumbersome to manage a large number of connections when connecting multiple VPCs. VPC Peering does not have a transitive property, meaning that if VPC A is peered with VPC B and VPC B is peered with VPC C, VPC A cannot connect to VPC C. Additionally, an Amazon VPC cannot be peered with too many other VPCs. When you need to connect multiple VPCs together, the routing configuration becomes very complex, difficult to manage and troubleshoot.\nAWS Transit Gateway AWS Transit Gateway is a powerful VPC feature that enables connecting multiple VPCs, VPN connections, and on-premises networks to a single gateway. It simplifies network configuration by eliminating peer connections between VPCs, instead connecting them to a central hub that acts as a network traffic router. Compared to VPC Peering, AWS Transit Gateway offers several advantages:\nEnhanced Performance: Transit Gateway delivers superior performance by leveraging a centralized routing mechanism, reducing the overhead associated with individual VPC peering connections. Simplified Management: It streamlines network management by eliminating the need to manage complex peering relationships between VPCs. Instead, all connections are managed through a single hub, providing a more unified and manageable network topology. Scalability: Transit Gateway is highly scalable, capable of handling a large number of VPCs and connections without compromising performance or manageability. This makes it ideal for large-scale, dynamic cloud environments. Improved Troubleshooting: Troubleshooting network issues becomes easier with Transit Gateway, as the centralized architecture provides a clear overview of network traffic and simplifies the identification of routing problems. Due to these advantages, AWS Transit Gateway has become a popular choice for large-scale cloud deployments with complex network requirements. It is particularly well-suited for organizations that need to interconnect multiple VPCs, VPN connections, and on-premises networks while maintaining high performance, manageability, and scalability. To effectively utilize Transit Gateway, it\u0026rsquo;s crucial to understand the different scenarios involved:\nVPCs in the same AWS Account and region VPCs in the same AWS Account, different regions VPCs in different AWS Accounts, same region VPCs in different AWS Accounts, different regions By understanding these scenarios, you can effectively utilize AWS Transit Gateway to connect multiple VPCs across various configurations, simplifying network management and enhancing network performance for complex cloud deployments.\n"
},
{
	"uri": "//localhost:1313/",
	"title": "AWS Transit Gateway Workshop",
	"tags": [],
	"description": "",
	"content": "AWS Transit Gateway Workshop Welcome to AWS Transit Gateway workshop. This workshop on AWS Transit Gateway equips you with the knowledge and skills to confidently manage and leverage its functionalities within your cloud network.\nThrough a series of hands-on exercises and practical scenarios, you will gain a deep understanding of its functionalities and configuration techniques. By the end of this workshop, you will emerge as a confident user of this powerful networking tool, ready to harness its capabilities to connect your Amazon VPCs with ease.\nBy participating in this workshop, you\u0026rsquo;ll unlock the power of AWS Transit Gateway, transforming your cloud networking capabilities and enabling seamless connectivity across your diverse network infrastructure. With hands-on learning, you\u0026rsquo;ll emerge as a confident Transit Gateway user, prepared to tackle networking challenges. Content Introduction Preparation Single Account - Single Region Single Account - Cross Region Cross Account - Single Region Cross Account - Cross Region Clean Up "
},
{
	"uri": "//localhost:1313/1-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "In this section we will learn about AWS Transit Gateway and its routing mechanism.\nContent AWS Transit Gateway AWS Transit Gateway routing mechanism "
},
{
	"uri": "//localhost:1313/3-single-account-single-region/3.1-preparation/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "In this step, we will deploy essential resources, including VPCs and EC2 instances, to lay the foundation for subsequent network configuration phases. The upcoming network configuration involves intricate details, particularly in terms of route tables. Since the primary objective of this workshop is to grasp the workings of AWS Transit Gateway, we will create only one EC2 instance within each VPC. This will serve for connectivity testing with other EC2 instances in different VPCs once network configuration is complete.\nDeploy CloudFormation Stack We will deploy three VPCs as follows by CloudFormation service. 1. Within the AWS Management Console interface:\nSearch keyword: cloudformation Select CloudFormation service 2. Within CloudFormation interface:\nClick Create stack Select Upload a template file Click Choose file Select file TransitGatewayWorkshop.yaml to upload Click Next 3. You can give any name for stack (e.g. TransitGatewayWorkshop). Follow these steps to get the EC2 AMI:\nSearch keyword ec2 then open EC2 service in the new window Create a new EC2 instance and scroll down to the Amazon Machine Image (AMI) configuration section. Copy AMI ID Go back to the CloudFormation window and replace the AMI ID you just copied then click Next Scroll down to the bottom of the page and click Next Continue scrolling to the bottom of the page and click Submit Wait a few minutes for your CloudFormation stack to be ready before moving on to the next step. "
},
{
	"uri": "//localhost:1313/4-single-account-cross-region/4.1-preparation/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "In this step we will deploy resources such as VPC, EC2 instance, AWS Transit Gateway and route table within ap-southeast-1 (Singapore) region.\nCloudFormation Stack This step is very similar to the preparation step of previous section, with just few things to note:\nUse VPC.yaml file Fill in the parameters as follows:\nStack name: BranchVPC EC2InstanceAMIId: AMI ID of Amazon Linux 2023 SubnetCidr: 10.4.0.0/24 VPCCidr: 10.4.0.0/16 VPCPrefix: branch Transit Gateway 1. Access to VPC service, navigate to Transit gateways then click Create transit gateway Configure the transit gateway as follows:\nName tag: singapore-tgw Description: Transit Gateway for region Singapore Uncheck Default route table association and Default route table propagation Uncheck default route table propagation to prevent new attachments from automatically creating association and propagation with the default route table.\n2. Create a transit gateway attachment with the following configuration\nName tag: branch-att Transit gateway ID: Select singapore-tgw Attachment Type: VPC VPC ID: Select branch-vpc 3. Create transit gateway route table and association\nWithin the Transit gateway route tables interface of the Singapore region, click Create transit gateway route table Set the configuration as follows:\nName tag: branch-tgw-rtb Transit gateway ID: singapore-tgw After creating branch-tgw-rtb, select Associations tab and click Create association then associate with branch-att attachment. Please open two tabs to select the Tokyo and Singapore regions in your browser to save time during configuration.\n"
},
{
	"uri": "//localhost:1313/5-cross-account-single-region/5.1-preparation/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "To proceed with the steps in this section, you will need an additional AWS account. However, if you do not have a second AWS account, you can still follow the steps below to gain an understanding of how to connect two VPCs from different AWS accounts within the same region.\nIn this step we will deploy a VPC and an EC2 instance running in this VPC in the Tokyo region of the second AWS account.\nLogin to the second AWS account using an incognito window or another browser, and make sure you keep it turned on so you can easily using the two accounts simultaneously. Switch to region ap-northeast-1 (Tokyo) Deploy a new VPC using CloudFormation Use the VPC.yaml file to deploy a VPC with the following parameters:\nStack name: PartnerVPC EC2InstanceAMIId: AMI ID of Amazon Linux 2023 SubnetCidr: 10.5.0.0/24 VPCCidr: 10.5.0.0/16 VPCPrefix: partner "
},
{
	"uri": "//localhost:1313/6-cross-account-cross-region/6.1-preparation/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "In this step, we will deploy a VPC and an EC2 instance in the Singapore region of the second account.\nLogin to the second account, switch to Singapore region and then perform the following steps.\nDeploy VPC Access CloudFormation service Use the VPC.yaml file to deploy VPC like the previous steps with the following parameters: Stack name: CustomerVPC EC2InstanceAMIId: AMI ID of Amazon Linux 2023 SubnetCidr: 10.6.0.0/24 VPCCidr: 10.6.0.0/16 VPCPrefix: customer Create Transit Gateway Access VPC service, then create new transit gateway with the following configuration:\nName tag: customer-tgw Uncheck Default route table association and Default route table propagation Create transit gateway attachment customer-att then attach to customer-vpc VPC. Create transit gateway route table customer-tgw-rtb then create association with customer-att attachment. "
},
{
	"uri": "//localhost:1313/1-introduction/1.2-routing/",
	"title": "AWS Transit Gateway Routing",
	"tags": [],
	"description": "",
	"content": "In this section, we will learn about the routing mechanism of AWS Transit Gateway.\nAWS Transit Gateway Attachment AWS Transit Gateway Attachment serves as a logical connection between a resource and AWS Transit Gateway. This resource can be a VPC, VPN connection, Direct Connect gateway, or other supported resource types. When a new Transit Gateway attachment is created, it gets associated with the default route table of that Transit Gateway. However, this behavior can be modified within the Transit Gateway configuration.\nEach AWS Transit Gateway attachment can only be associated with one route table. To associate the attachment with a new route table, the existing association must be deleted first. When working with AWS Transit Gateway, if you encounter an error while associating an attachment with a route table, check if the attachment is already associated with another route table.\nTypes of AWS Transit Gateway Attachments:\nVPC: Connects a VPC to Transit Gateway VPN: Connects a VPC connection to Transit Gateway Peering Connection: Connects two Transit Gateways together Connect: Connects an SD-WAN appliance or on-premises network to Transit Gateway This workshop will focus on two specific attachment types: VPC and Peering Connection.\nResources that can connect to Transit Gateway via attachment are shown in the figure below. Route table AWS Transit Gateway route table is a logical entity that holds a collection of routes (route) defining how to forward traffic between resources connected to Transit Gateway. When you create a new AWS Transit Gateway, a default route table is automatically generated. However, if you disable route table association and route propagation, AWS will not create this default route table. You can also create additional route tables for your AWS Transit Gateway.\nEach attachment can only be associated with one route table and propagate routes to one or more route tables.\nThis workshop will focus on two types of route tables: Transit Gateway route table and VPC route table.\nTransit Gateway route table: Manages traffic routing between VPCs, on-premises networks, and attachments connected to Transit Gateway. VPC route table: Manages traffic routing within the scope of a single VPC. Route table association Transit Gateway route table association establishes a mechanism for automatically propagating routes from a route table to associated attachments, ensuring that traffic finds its intended destination without manual intervention.\nEach attachment can only be associated with a single route table. A single route table can be associated with multiple attachments.\nWhen an attachment is associated with a routing table, the routes in that routing table are automatically propagated to this attachment. This means that the routes in the routing table will be used to direct incoming traffic and go to the resources connected to that attachment.\nExample: Connect a VPC and the On-Premises Network\nConsider VPC A connected to Transit Gateway via the VPC A attachment. Creating a custom Transit Gateway route table and associating it with the VPC A attachment allows you to define a route to an on-premises network (e.g., 10.2.0.0/16). This route is automatically propagated to the attachment, enabling resources in VPC A to connect to the on-premises network without explicit VPC-to-on-premises network routing configuration. While route propagation simplifies network management, AWS Transit Gateway Policy Table offers an advanced mechanism for filtering and controlling routes propagated to specific attachments. However, due to its complexity, this feature will not be covered in this workshop.\nRoute propagation Within the realm of AWS Transit Gateway, route propagation serves as a fundamental mechanism for automatically distributing routes from a route table to associated attachments. This process streamlines network management by eliminating the need for manual route configuration for every attachment.\nEach attachment (e.g. VPC, VPN, Direct Connect gateway) comes with routes that can be installed in one or more transit gateway route tables. When an attachment is propagated to a transit gateway route table, these routes are installed in the route table.\nExample: Connect two VPCs\nConsider VPC A and VPC B connected to Transit Gateway through their respective attachments. Creating a custom Transit Gateway route table and associating it with the VPC A attachment. Then you create propagation between VPC B attachment and this route table. The following route will automatically be added to the route table.\nDestination Target Route type VPC B CIDR Attachment ID for VPC B Propagated The newly added route will be propagated to VPC A attachment because it is already associated with this route table, this configuration allows VPC A to connect to VPC B through Transit Gateway. Route table association vs. Route propagation By understanding the concepts of route propagation and its implementation within AWS Transit Gateway attachments, you can effectively manage network traffic flow, simplify network configuration, and enhance the overall efficiency of your cloud infrastructure.\nThe key difference is that association determines which route table is used for a specific attachment, while propagation ensures the routes in that table are applied to the attachment, enabling connectivity between the connected resources.\nImagine a Transit Gateway as a vast library, each bookshelf representing a route table and each book representing a route. Route table association can be likened to granting an individual a library card, providing them with access to the books (routes) within the library (route table). Route propagation, on the other hand, is analogous to allowing the individual to borrow books, enabling them to utilize the resources (routes) for their intended purpose.\nExample: E-commerce system with microservices architecture\nConsider an e-commerce system employing a microservices architecture, comprising four services: Product, Order, Analyzer, and Visualizer. Each service plays a distinct role:\nProduct: Handles product-related requests Order: Manages purchase-related requests Analyzer: Analyzes product quantity, order volume, revenue, and other metrics Visualizer: Utilizes data from Analyzer to generate charts and graphs Each service is deployed in its corresponding VPC: Product VPC, Order VPC, Analyzer VPC, and Visualizer VPC. All VPCs are connected to the same AWS Transit Gateway using the respective attachments: Product Attachment, Order Attachment, Analyzer Attachment, and Visualizer Attachment. To enable communication between these VPCs, route configuration is essential.\nDue to the urgency of releasing the product to users, the Product and Order services are prioritized for initial release. The development of Analyzer and Visualizer follows. Since Analyzer is still under development and not yet ready for production, its connection to the released services is not immediate. Therefore, we will have two environments: production including two services Product, Order and non-production including two services Analyzer and Visualizer.\nWe need to configure the network as follows:\nProduct and Order services can be connected to each other Analyzer and Visualizer services can connect to each other Analyzer and Visualizer services cannot connect to Product and Order services Utilizing a single route table associated with all attachments is not recommended due to potential issues:\nSecurity Isolation: Linking all attachments to a single route table compromises security isolation between production and non-production environments. Different configuration requirements may exist between these environments, limiting flexibility. Unnecessary Propagation: Propagating routes from production VPCs to non-production VPCs is unnecessary as these VPCs do not require direct communication. This configuration adds complexity and potentially slows down routing between networks. To address these challenges, we can create two custom route tables:\nProductionRTB: Associated with Product Attachment and Order Attachment NonProductionRTB: Associated with Analyzer Attachment and Visualizer Attachment This approach effectively defines route tables for specific attachments and segregates configurations between production and non-production environments. The technique of using multiple route tables is widely employed in subsequent sections.\nOnce Analyzer is ready, it needs to connect to Product and Order for data analysis and revenue reporting. Visualizer only requires data from Analyzer, hence connecting Analyzer VPC to Product VPC and Order VPC suffices. This can be achieved by creating propagation between ProductionRTB and Analyzer Attachment. Consequently, a new route enabling traffic routing to Analyzer Attachment is automatically generated and propagated to Product and Order attachments. Routes for peering attachments Similar to VPC peering, AWS Transit Gateway enables the interconnection of two Transit Gateways, facilitating seamless communication between networks. To achieve this, a peering attachment is created within one Transit Gateway, specifying the peer Transit Gateway to establish the connection. Since peering attachments do not automatically propagate routes, manual configuration of static routes is required to direct traffic to the peered Transit Gateway. Once traffic reaches the peered Transit Gateway, it can be further routed to its connected attachments. "
},
{
	"uri": "//localhost:1313/4-single-account-cross-region/4.2-configure-route-tables/",
	"title": "Configure routing",
	"tags": [],
	"description": "",
	"content": "In this step, we will configure routing to connect Share VPC to Branch VPC.\n1. Within the Transit gateways interface of the Tokyo region, select tokyo-tgw and copy the id of this transit gateway 2. Within Transit gateway attachments interface of Singapore region, click Create transit gateway attachment Fill in the configuration information as follows:\nName tag: peering-tokyo Transit gateway ID: Select singapore-tgw Attachment Type: Peering connection Account: My account Region: Tokyo Transit gateway (accepter): ID of tokyo-tgw transit gateway 3. Back to Transit gateway attachments interface of Tokyo, you will see an attachment with Pending Acceptance status.\nRename this attachment to peering-singapore then select Actions and click Accept transit gateway attachment 4. Configure peering between 2 transit gateways\nBack to Transit gateway route tables interface of Singapore region, select branch-tgw-rtb then select Routes tab and click Create static route Enter the CIDR as 10.3.0.0/16 (CIDR of Share VPC) then select peering-tokyo attachment. Repeat the above step with share-tgw-rtb of the Tokyo region, enter CIDR as 10.4.0.0/16 (CIDR of Branch VPC) and select peering-singapore attachment. After creation, there will be a new static route with type Peering as follows: 5. Configure route table for each transit gateway\nCreate a new transit gateway route table in the Singapore region named peering-tokyo-tgw-rtb and attach it to singapore-tgw transit gateway. Create association between peering-tokyo-tgw-rtb route table and peering-tokyo attachment. Create new propagation between peering-tokyo-tgw-rtb route table and branch-att attachment. Repeat the above steps to create a new transit gateway route table in Tokyo region named peering-singapore-tgw-rtb and add association with peering-singapore, propagating to share-att as follows: When you create an association with peering-singapore attachment, you may get the following error. The reason is because of the present This attachment is being associated with default-tgw-rtb, you need to delete this association first before creating a new association.\nDelete the association between peering-singapore attachment and default-tgw-rtb route table. Re-create association between peering-singapore attachment and peering-singapore-tgw-rtb route table. Create propagation from peering-singapore-tgw-rtb route table to share-att attachment. 6. Configure routing tables of VPCs\nWithin Route tables interface of Tokyo region, select share-rtb route table then select Routes tab and click Edit routes Add a new route with destination 10.4.0.0/16 and target share-att attachment. Repeat the above steps to add a new route to the branch-rtb route table in the Singapore region with destination 10.3.0.0/16 and target is branch-att. 7. Check the connection between instances\nWe will try to connect from the Tokyo region\u0026rsquo;s share instance to the Singapore region\u0026rsquo;s branch instance to check if the Share VPC and Branch VPC are connected to each other.\nWithin the EC2 interface of the Singapore region, copy the private IPv4 of the branch instance. Connect to the share instance using EC2 instance connect as in the previous sections and then run the following command:\nping \u0026lt;branch_instance_private_ipv4\u0026gt; -c5 The results show that we have successfully configured. Practice yourself Repeat the above steps to configure the connection between Test VPC and Branch VPC and test your configuration. "
},
{
	"uri": "//localhost:1313/5-cross-account-single-region/5.2-configure-route-tables/",
	"title": "Configure routing",
	"tags": [],
	"description": "",
	"content": "In this step, we will configure routing to connect Dev VPC and Partner VPC. You can absolutely use the peering connection between two AWS Transit Gateways similar to the previous section for configuration. But in the case of two VPCs belonging to the same region, we can use a better, easy-to-configure way and more cost-effective that is AWS Resource Access Manager.\nAWS Resource Access Manager (AWS RAM) is a service that allows you to share AWS resources, such as EC2 instances, database, network firewall, Transit Gateway, etc with other AWS accounts. This simplifies the process of sharing resources and managing access across multiple accounts.\nAfter the first AWS account share AWS Transit Gateway to the second account, users of second account can create transit gateway attachments and attach to this Transit Gateway. This allows users of first account to manage, configure newly created attachments as if they were created by this account.\nShare AWS Transit Gateway using AWS Resource Access Manager (AWS RAM) Access to AWS RAM service Within AWS management console interface of first account, search keyword ram Select Resource Access Manager service Create share resource Select Resource shares under Shared by me section then click Create resource share Configuration is as follows: Name: tokyo-shared-tgw-via-ram Resources: Select Transit Gateways then select tokyo-tgw Click next until the step of adding Principals, copy the id of second account (12 digits) then click Add After creating the resource share, the interface will look like this: Go back to second account, access the AWS RAM service, select Resource shares under the Shared with me section and you will see an invitation with a status of Pending. Click on that invitation and then click Accept resource share Configure route table Create transit gateway attachment for Partner VPC Within Transit gateways interface of second account, select the newly shared transit gateway and rename it to tokyo-shared-tgw Create transit gateway attachment partner-att then attach to this transit gateway and partner-vpc After creating, you will see the status of this attachment is Pending Acceptance because second account is creating a resource attached to a shared resource from first account, so it needs to be confirmed by first account before creating. Go back to the Transit gateway attachments interface of first account, you will see the attachment just created by second account. Rename it to partner-att and accept attachment like this: Configure routing for transit gateway\nCreate a new transit gateway route table partner-tgw-rtb in first account Delete association between partner-att attachment and default-tgw-rtb route table Create new association between partner-tgw-rtb route table and partner-att attachment Add propagation from the partner-tgw-rtb route table to the dev-att attachment. Add propagation from the dev-tgw-rtb route table to the partner-att attachment. Configure routing for VPCs Within the Route tables interface of first account, select dev-rtb and add a new route with destination 10.5.0.0/16 and target is dev-att attachment. Repeat the above step to add a route with destination 10.1.0.0/16 and target as partner-att attachment to the route table partner-rtb in second account. Check connection between instances Access the EC2 service of second account, select the partner instance, then copy the private IPv4. Connect to the dev instance using EC2 instance connect and run the following command to test the connection.\nping \u0026lt;partner_instance_private_ipv4\u0026gt; -c5 The result show that we have successfully configured. You can connect from the partner instance to dev instance as well. Practice yourself Try to configure routing to connect Test VPC and Partner VPC to better understand the process.\n"
},
{
	"uri": "//localhost:1313/6-cross-account-cross-region/6.2-configure-route-tables/",
	"title": "Configure routing",
	"tags": [],
	"description": "",
	"content": "In this section we will configure to connect Test VPC and Customer VPC. This configuration is very similar to part 4, all steps below are only briefly described, not detailed.\n1. Transit Gateway Peering Create a new transit gateway attachment in second account with the following configuration:\nName tag: peering-company-x-att Transit gateway ID: Select customer-tgw Attachment type: Peering connection Account: Select Other account Account ID: First AWS account ID Region: Tokyo Transit gateway (accepter): ID of tokyo-tgw transit gateway Back to Transit gateway attachments interface of first account, you will see an attachment with Pending Acceptance status. Rename it to peering-customer-att then accept. Within Transit gateway route tables interface of first account, select test-tgw-rtb and add a new static route with CIDR 10.6.0.0/16 and attachment peering-customer-att. Do the same to add a new static route for customer-tgw-rtb in second account with CIDR 10.2.0.0/16 and attachment peering-company-x-att. 2. Configure route tables for transit gateways Create a new transit gateway route table in second account named peering-company-x-tgw-rtb attached to customer-tgw then create an association with peering-company-x-att attachment and propagate to customer-att attachment. Do the same to create transit gateway route table peering-customer-tgw-rtb in first account then associate with tokyo-tgw transit gateway, create association with peering-customer-att attachment and propagate to test-att attachment. 3. Configure route tables for VPCs Add a new route with destination 10.6.0.0/16 and target test-att to test-rtb route table in first account. Do the same to add a route with destination 10.2.0.0/16 and target customer-att to customer-rtb route table in second account. 4. Check the connection between instances Connect to the test instance using EC2 instance connect and then try connect to the customer instance. The results show that we have successfully connected. Practice yourself Try to configure routing to connect Dev VPC and Customer VPC to better understand the process.\n"
},
{
	"uri": "//localhost:1313/3-single-account-single-region/3.2-create-attachments/",
	"title": "Create transit gateway and attachments",
	"tags": [],
	"description": "",
	"content": "In this step, we will create AWS Transit Gateway and attachments then connect to the VPCs created in the previous step.\n1. Within AWS Management Console interface, search vpc then choose VPC service 2. Create AWS Transit Gateway\nWithin VPC interface, navigate to Transit gateways Click Create transit gateway Fill in the following information then click Create transit gateway Name tag: tokyo-tgw Description: Transit Gateway for region Tokyo 3. Create attachments After your Transit Gateway become available state, you can create attachments.\nWithin VPC interface, navigate to Transit gateway attachments Click Create transit gateway attachment Enter the following information: Name tag: dev-att Transit gateay ID: tokyo-tgw Attachment type: VPC VPC ID: dev-vpc Click Create transit gateway attachment Repeat the above step to create 2 more transit gateway attachments with the following configuration:\ntest-att attachment attach to test-vpc VPC share-att attachment attach to share-vpc VPC After creating, we will have the following attachments. "
},
{
	"uri": "//localhost:1313/2-preparation/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "Preparation Download this file to your computer before proceed next steps. CloudFormation Templates\rAWSTransitGatewayWorkshop.zip\r(2 ko)\rIn the next steps, we will deploy resources to two regions: ap-northeast-1 (Tokyo) and ap-southeast-1 (Singapore). In which ap-northeast-1 (Tokyo) is the primary region. You can choose any other suitable regions.\n"
},
{
	"uri": "//localhost:1313/3-single-account-single-region/",
	"title": "Single Account - Single Region",
	"tags": [],
	"description": "",
	"content": "In this section, we will configure AWS Transit Gateway to connect VPCs in the same AWS account and the same region.\nScenario: You are a DevOps Engineer at startup company X. Your company is developing a system that will be deployed on AWS. As a new startup, cost-efficiency is crucial. You are tasked with deploying the system to two separate environments Dev and Test, in a cost-effective manner. Since these environments are only for development purposes, you can share resources between the two environments.\nTo meet these requirements, you decide to deploy three VPCs: Dev, Test, and Share, in the same region. The Share VPC will contain resources that can be used in both the Dev and Test environments, such as databases and cache. You need to configure routing for Dev VPC and Test VPC to connect to Share VPC.\nFor scenarios with a small number of VPC connections, VPC Peering is often the preferred choice. However, in this workshop, you will explore an alternative approach using AWS Transit Gateway. To simplify the deployment, we will only deploy one EC2 instance in each VPC to test network connectivity. We will configure the network as follows: Content Preparation Create transit gateway attachments Single route table Multiple route tables "
},
{
	"uri": "//localhost:1313/3-single-account-single-region/3.3-single-route-table/",
	"title": "Single route table",
	"tags": [],
	"description": "",
	"content": "In this step, we will configure routing for Dev VPC, Test VPC to connect to the Share VPC using only the default route table.\nCheck the connection between EC2 instances 1. Connect to dev instance\nAccess EC2 service then navigate to Instances page, then select dev instance Click Connect Keep the default configurations then click Connect 2. Check connection from dev to share instance\nReturn to the list of instances page and select share instance Copy private IPv4 address of this instance Return to the EC2 instance connect interface of the dev instance and run the following command: ping \u0026lt;share_instance_private_ipv4\u0026gt; -c5 After few minutes, we receive a message saying we cannot connect to the share instance. The reason is because these 2 virtual machines are located in 2 VPCs that are not connected to each other. Configure routing for Dev VPC 1. Configure route table for Dev VPC\nReturn to VPC interface, select Route tables\nSelect dev-rtb\nSelect Routes tab then click Edit routes Add a new route with destination 10.3.0.0/16 (CIDR of Share VPC), select Transit Gateway for target then select dev-att and click Save changes 2. Configure the routing table for Share VPC by repeating the above step 3. Check the connection again\nReturn to the EC2 instance connect interface and rerun the following command: ping \u0026lt;private_ipv4_share_instance\u0026gt; -c5 The results show that it is possible to connect from the dev instance to the share instance, proving that the Dev VPC and Share VPC can connect to each other through transit gateway. Configure routing for Test VPC Repeat the above steps to configure the connection between Test VPC and Share VPC and test your configuration. "
},
{
	"uri": "//localhost:1313/3-single-account-single-region/3.4-multiple-route-tables/",
	"title": "Multiple route tables",
	"tags": [],
	"description": "",
	"content": "From this section forward, we will transition the AWS Transit Gateway configuration from utilizing a single route table to employing multiple route tables.\nAs mentioned previously, each newly created attachment is automatically associated with the default route table. While this simplifies initial configuration, it can lead to complex, cumbersome, and challenging route table management as the number of attachments and routes grows. Additionally, due to the association and propagation of all attachments, any attachment connected to the Transit Gateway can route to all other attachments. In many scenarios, this is not desirable, and you may instead want finer control over traffic direction for each network component. To achieve this granular control, multiple route tables can be employed.\nConfigure routing 1. Delete the association between transit gateway attachments and the default route table\nWithin VPC interface, select Transit gateway route tables Select the unique transit gateway route table and change the name to default-tgw-rtb Select Associations tab Select any association and then press Delete association Continue deleting the remaining associations until they are gone 2. Check connection from dev instance to share instance\nReturn to the EC2 instance connect interface of the dev instance and try to connect to the share instance, you will see that you cannot connect to it anymore. The reason is because we have removed the link between transit gateway attachments and the default route table without configuring new route tables. 3. Create new transit route table\nWithin transit gateway route tables interface, click Create transit gateway route table Set new route table name to dev-tgw-rtb\nSelect transit gateway for route table then click Create transit gateway route table Repeat the above steps to create two new route tables, test-tgw-rtb and share-tgw-rtb as follows: 4. Create new association for transit gateway attachments\nWithin transit gateway route tables interface, select dev-tgw-rtb\nSelect Associations tab\nClick Create association Select dev-att then click Create association Repeat the above steps to create the association of test-tgw-rtb and share-tgw-rtb as follows: 5. Create propagations\nWithin transit gateway route tables interface, select dev-tgw-rtb\nSelect Propagations tab then click Create propagation Select share-att then click Create propagation After creating propagation, a route will be automatically created as follows: Do the same to create propagation from share-tgw-rtb to dev-att 6. Check connection from dev instance to share instance Practice yourself Repeat the above steps to configure the connection from test instance to share instance and then check your results. "
},
{
	"uri": "//localhost:1313/4-single-account-cross-region/",
	"title": "Single Account - Cross Region",
	"tags": [],
	"description": "",
	"content": "In this section, we will configure Transit Gateway to connect VPCs in the same AWS account but in different regions.\nScenario: After a period of growth, your company has expanded and opened a second branch in a different country. The first product of this branch is a website designed for marketing purposes. This website needs to retrieve data from the database to generate statistics and reports on the impressive achievements of your company. Since the new branch is still in its early stages, they do not have many engineers. You are tasked with assisting the development team in preparing the deployment environment for the product on AWS. To save time and costs, you want to use the Share VPC to share the database and cache, similar to the previous section.\nThe branch has already prepared a VPC named Branch and a Transit Gateway. Your task is to connect the Branch VPC to the Share VPC. Similar to the previous section, you could use VPC Peering. However, in this section, you will explore an alternative approach using AWS Transit Gateway. The network configuration will look as follows: At first glance, the network diagram might seem intricate, but let\u0026rsquo;s break it down using the concepts of Route Table Association and Route Propagation introduced earlier.\nImagine traffic originating from the Share VPC embarking on a journey through the network. Its first stop is the Tokyo TGW, where it\u0026rsquo;s greeted by the peering attachment connecting it to the Singapore TGW. This attachment acts as a bridge, allowing the traffic to seamlessly traverse to the Singapore TGW. Upon arrival at the Singapore TGW, the traffic encounters Branch VPC route table that directs it towards the Branch VPC. This route table, acting as a traffic guide, ensures that the data reaches its intended destination.\nContent Preparation Configure routing "
},
{
	"uri": "//localhost:1313/5-cross-account-single-region/",
	"title": "Cross Account - Single Region",
	"tags": [],
	"description": "",
	"content": "In this section, we will configure AWS Transit Gateway to connect VPCs located in different accounts but same region.\nScenario: As your company attracts more prominent clients, system security becomes increasingly crucial. However, your company does not have any security experts. Therefore, the board of directors decides to collaborate with a specialized security firm to conduct penetration testing to identify potential security vulnerabilities. Your partner company, with extensive experience in the security domain, understands the importance of early vulnerability detection and requests to conduct testing on the Dev environment of your system. They have already set up the necessary servers and tools on a VPC named Partner within the same region as your company\u0026rsquo;s infrastructure.\nYour job is to connect the Partner VPC with Dev VPC so that the partner company\u0026rsquo;s security experts can test in early stages of development. Because your company may cooperate with many partners in the future, for easily manage, configure and troubleshoot the network, you must use Transit Gateway for configuration instead of VPC Peering. You can absolutely use the peering configuration of two transit gateways as in the previous section. However, the partner company has cooperated with many customers so their network configuration has become very complex, they will be happy if they do not need to manage additional network configuration when connecting to your company\u0026rsquo;s network. In this case, you can use an AWS service called AWS Resource Access Manager (AWS RAM) to simplifies the network configuration for the partner company. Please note that you can only use this service to connect VPCs located in the same region. Your network configuration will look like this: Content Preparation Configure routing "
},
{
	"uri": "//localhost:1313/6-cross-account-cross-region/",
	"title": "Cross Account - Cross Region",
	"tags": [],
	"description": "",
	"content": "In this section, we will configure AWS Transit Gateway to connect VPCs located in different accounts and regions.\nScenario: After achieving success in self-developing products, your company has attracted numerous large customers. One of these customers wishes to collaborate with your company to develop a system for their organization. The customer company has an existing VPC named Customer VPC and a Transit Gateway that can facilitate a connection between your company\u0026rsquo;s network. During the system development process, the development team requires access to customer data. However, due to security concerns, the customer company only agrees to share this data via a private network connection. Additionally, they want to use the system before its official release.\nIn this case, you should not connect Dev VPC directly to Customer VPC because the Dev environment has not been carefully tested, so errors may occur when customer use it. Instead, you should configure to connect Test VPC to Customer VPC because the Test environment has been carefully tested and the Dev environment is using the same data source with this environment so it can meet the requirements of both customer company and development team. The configuration is very similar to the previous sections. Your network configuration will look like this: Content Preparation Configure routing "
},
{
	"uri": "//localhost:1313/7-cleanup/",
	"title": "Clean Up",
	"tags": [],
	"description": "",
	"content": "After completing this workshop, you need to delete all created resources or you will be charged. Please delete carefully and check again after deleting because Transit Gateway is a expensive resource. If you forget to delete Transit Gateway, it can cost a lot of money.\nPlease delete the resources in the order below in both Tokyo and Singapore regions.\nIf you did not practice part 5 and 6:\nDelete all transit gateway attachments Delete transit gateway Delete CloudFormation Stack Delete S3 buckets with names similar to the format cf-templates-* (S3 buckets automatically created by AWS to store your CloudFormation template files) If you practiced part 5 and 6:\nFirst Account: Delete shared resources in the AWS RAM service Second Account: Delete all transit gateway attachments Delete transit gateway Delete CloudFormation Stack Delete S3 buckets with names similar to the format cf-templates-* "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]